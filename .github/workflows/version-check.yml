name: Version Check

on:
  pull_request_review:
    types: [submitted]
    branches:
      - main

jobs:
  version-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install

      - name: Get version from package.json
        id: get_package_version
        run: |
          PACKAGE_VERSION=$(node -p -e "require('./package.json').version")
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV

      - name: Get version from manifest.json
        id: get_manifest_version
        run: |
          MANIFEST_VERSION=$(jq -r .version public/manifest.json)
          echo "MANIFEST_VERSION=$MANIFEST_VERSION" >> $GITHUB_ENV

      - name: Ensure versions match
        run: |
          if [ "$PACKAGE_VERSION" != "$MANIFEST_VERSION" ]; then
            echo "Error: package.json version ($PACKAGE_VERSION) does not match manifest.json version ($MANIFEST_VERSION)."
            exit 1
          fi

      - name: Get latest release version
        id: get_latest_release
        run: |
          LATEST_VERSION=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
          echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV

      - name: Check version
        run: |
          echo "New version: $PACKAGE_VERSION"
          echo "Latest release version: $LATEST_VERSION"
          if [ "$(printf '%s\n' "$PACKAGE_VERSION" "$LATEST_VERSION" | sort -V | head -n1)" = "$PACKAGE_VERSION" ]; then
            echo "Error: New version ($PACKAGE_VERSION) is not greater than the latest release version ($LATEST_VERSION)."
            exit 1
          fi
